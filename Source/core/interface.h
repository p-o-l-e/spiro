/*****************************************************************************************************************************
* Copyright (c) 2022-2025 POLE
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
******************************************************************************************************************************/
#pragma once
#include <atomic>
#include "constants.hpp"
#include "node.hpp"
#include <unordered_map>

namespace core 
{
    namespace settings 
    {
        inline const unsigned osc_n 	{ 4 }; // # Oscillators
        inline const unsigned lfo_n     { 2 }; // # LFOs
        inline const unsigned map_n     { 2 }; // # CSOs
        inline const unsigned snh_n     { 2 }; // # SNHs
        inline const unsigned env_n 	{ 4 }; // # Envelopes
        inline const unsigned vcf_n 	{ 2 }; // # Filters
        inline const unsigned vca_n 	{ 2 }; // # VCAs
        inline const unsigned vcd_n     { 1 }; // # Delays
        inline const unsigned rtr_n     { 1 }; // # Rotors
        inline const unsigned sum_n     { 2 }; // # Summators
        inline const unsigned pct_n     { 1 }; // # Multipliers
        inline const unsigned mix_n     { 1 }; // # Mixers
        inline const unsigned ctr_n 	{ 5 }; // # Controls

        inline const unsigned prm_n 	{ 82 }; // # Parameters
        inline const unsigned btn_n 	{ 23 }; // # Buttons
        inline const unsigned pot_n 	{ 50 }; // # Potentiometers
        inline const unsigned ports_in 	{ 77 }; // # Inputs
        inline const unsigned ports_out { 47 }; // # Outputs
        inline const unsigned ports_n 	{ ports_in + ports_out };
    }
    


namespace interface
{
	enum potentiometer_list
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Oscillator A ///////////////////////////////////////////////////////////////////////////////////////////////////////
		vco_a_warp, 	// 0
		vco_a_fine,  	// 1
		vco_a_pw,  		// 2
		vco_a_fm,		// 3
		vco_a_am,		// 4
		vco_a_amp,		// 5
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Oscillator B ///////////////////////////////////////////////////////////////////////////////////////////////////////
		vco_b_warp,		// 6
		vco_b_fine,		// 7
		vco_b_pw,		// 8
		vco_b_fm,		// 9
		vco_b_am,	    // 10
		vco_b_amp,		// 11
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Oscillator C ///////////////////////////////////////////////////////////////////////////////////////////////////////
		vco_c_warp,		// 12
		vco_c_fine,		// 13
		vco_c_pw,		// 14
		vco_c_fm,		// 15
		vco_c_am,	    // 16
		vco_c_amp,		// 17
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Oscillator D ///////////////////////////////////////////////////////////////////////////////////////////////////////
		vco_d_warp,		// 18
		vco_d_fine,		// 19
		vco_d_pw,		// 20
		vco_d_fm,		// 21
		vco_d_am,	    // 22
		vco_d_amp,		// 23
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Chaotic ////////////////////////////////////////////////////////////////////////////////////////////////////////////
		chs_a_tune,		// 18
		chs_a_warp,		// 19
		chs_a_amp,		// 20
		chs_b_tune,		// 21
		chs_b_warp,	    // 22
		chs_b_amp,		// 23
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VCAs ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vca_a,			// 24
		vca_b,			// 25
		vcd_time,		// 26
		vcd_feed,		// 27
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VCF A //////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vcf_a_res,		// 28
		vcf_a_cut,		// 29
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VCF B //////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vcf_b_res,		// 30
		vcf_b_cut,		// 31
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Rotor //////////////////////////////////////////////////////////////////////////////////////////////////////////////
		angle_x,		// 32
		angle_y,		// 33
		angle_z,		// 34
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// LCR to LR //////////////////////////////////////////////////////////////////////////////////////////////////////////
		lc_to_l,		// 35
		cr_to_r,		// 36

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Main volume ////////////////////////////////////////////////////////////////////////////////////////////////////////
		volume,			// 38
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Sample n Hold //////////////////////////////////////////////////////////////////////////////////////////////////////
		snh_a,
		snh_b,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// LFOs ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		lfo_a_freq,
		lfo_b_freq,
		lfo_a_am,
		lfo_b_am

	};
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Input Sockets : ////////////////////////////////////////////////////////////////////////////////////////////////////////
	enum socket_list
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Oscillator A ///////////////////////////////////////////////////////////////////////////////////////////////////////
		vco_a_in_ec,	// 1 Fine
		vco_a_in_sh,	// 2 Warp
		vco_a_in_pw,	// 3 PWM
		vco_a_in_fm,	// 4 FM
		vco_a_in_am,	// 5 AM
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Oscillator B ///////////////////////////////////////////////////////////////////////////////////////////////////////
		vco_b_in_ec,	// 6
		vco_b_in_sh,	// 7
		vco_b_in_pw,	// 8
		vco_b_in_fm,	// 9
		vco_b_in_am,	// 10
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Oscillator C ///////////////////////////////////////////////////////////////////////////////////////////////////////
		vco_c_in_ec,	// 11
		vco_c_in_sh,	// 12
		vco_c_in_pw,	// 13
		vco_c_in_fm,	// 14
		vco_c_in_am,	// 15
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Oscillator D ///////////////////////////////////////////////////////////////////////////////////////////////////////
		vco_d_in_ec,	// 16
		vco_d_in_sh,	// 17
		vco_d_in_pw,	// 18
		vco_d_in_fm,	// 19
		vco_d_in_am,	// 20
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Chaos //////////////////////////////////////////////////////////////////////////////////////////////////////////////
		chs_a_in_ec,
		chs_b_in_ec,
		chs_a_in_wm,
		chs_b_in_wm,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// LCR Mix ////////////////////////////////////////////////////////////////////////////////////////////////////////////
		lcr_in_l_a, 	// 21
		lcr_in_c_a,		// 22
		lcr_in_r_a,  	// 23

		lcr_in_l_b, 	// 21
		lcr_in_c_b,		// 22
		lcr_in_r_b,  	// 23

		lcr_cv_l, 		// 21
		lcr_cv_c,		// 22
		lcr_cv_r,  		// 23

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// LR Mix /////////////////////////////////////////////////////////////////////////////////////////////////////////////
		mix_in_l,
		mix_in_c,
		mix_in_r,

		mix_lc_cv,
		mix_cr_cv,

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VCFs ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vcf_a_in_a,
		vcf_b_in_a,

		vcf_a_in_b,
		vcf_b_in_b,

		vcf_a_in_c,
		vcf_b_in_c,

		vcf_a_q_in,
		vcf_b_q_in,

		vcf_a_cut_in,
		vcf_b_cut_in,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VCAs ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vca_a_in_a,
		vca_b_in_a,

		vca_a_in_b,
		vca_b_in_b,

		vca_a_in_cv,
		vca_b_in_cv,

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Delay //////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vcd_in_a,
		vcd_in_b,
		vcd_in_c,
		vcd_in_d,

		vcd_in_time,
		vcd_in_feed,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// SNH ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		snh_a_in_a,
		snh_a_in_b,
		snh_b_in_a,
		snh_b_in_b,
		snh_a_time,
		snh_b_time,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// LFOs ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		lfo_a_in_freq,
		lfo_b_in_freq,
		lfo_a_in_am,
		lfo_b_in_am,
        
        sum_a_in_a,
        sum_a_in_b,
        sum_b_in_a,
        sum_b_in_b,

        pct_in_a,
        pct_in_b,
        pct_in_c,

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Output Sockets : ///////////////////////////////////////////////////////////////////////////////////////////////////
		vco_a_out,
		vco_b_out,
		vco_c_out,
		vco_d_out,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Envelope ///////////////////////////////////////////////////////////////////////////////////////////////////////////
		env_a_out,
		env_b_out,
		env_c_out,
		env_d_out,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VCAs ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vca_a_out_a,
		vca_a_out_b,

		vca_b_out_a,
		vca_b_out_b,

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Delay //////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vcd_out_a,
		vcd_out_b,
		vcd_out_c,
		vcd_out_d,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VCFs ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		vcf_a_out_lp,
		vcf_a_out_bp,
		vcf_a_out_hp,

		vcf_b_out_lp,
		vcf_b_out_bs,
		vcf_b_out_hp,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// LCR Mix ////////////////////////////////////////////////////////////////////////////////////////////////////////////
		lcr_out_l_a,
		lcr_out_c_a,
		lcr_out_r_a,

		lcr_out_l_b,
		lcr_out_c_b,
		lcr_out_r_b,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Chaos //////////////////////////////////////////////////////////////////////////////////////////////////////////////
		chs_a_out_x,
		chs_a_out_y,
		chs_a_out_z,
		
		chs_b_out_x,
		chs_b_out_y,
		chs_b_out_z,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// SNH ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		snh_a_out,
		snh_b_out,
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// LFOs ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		lfo_a_out_a,
		lfo_a_out_b,
		lfo_b_out_a,
		lfo_b_out_b,

        sum_a_out_a,
        sum_a_out_b,
        sum_b_out_a,
        sum_b_out_b,

        pct_out_a,

		p_wheel,
		m_wheel
	};

	enum button_list
	{
		vco_a,
		vco_b,
		vco_c,
		vco_d,

		chs_a,
		chs_b,

		lfo_a,
		lfo_b,

		envs, 
		
		env_a,	
		env_b,
		env_c,
		env_d,
		
		soft_a,
		soft_b,
		soft_c,
		soft_d,

		soft_e,	
		soft_f,	
		soft_g,	
		soft_h,

		menu,
		scope
	};

	enum parameter_list
	{
		vco_a_oct,
		vco_b_oct,
		vco_c_oct,
		vco_d_oct,

		vco_a_freerun,
		vco_b_freerun,
		vco_c_freerun,
		vco_d_freerun,

        vco_a_form,
        vco_b_form,
        vco_c_form,
        vco_d_form,

		chs_a_form,
		chs_b_form,

		lfo_a_form,
		lfo_b_form,

		env_a_scale,
		env_b_scale,
		env_c_scale,
		env_d_scale,

		env_a_form_a,
		env_a_form_h,
		env_a_form_d,
		env_a_form_s,
		env_a_form_r,

		env_b_form_a,
		env_b_form_h,
		env_b_form_d,
		env_b_form_s,
		env_b_form_r,

		env_c_form_a,
		env_c_form_h,
		env_c_form_d,
		env_c_form_s,
		env_c_form_r,

		env_d_form_a,
		env_d_form_h,
		env_d_form_d,
		env_d_form_s,
		env_d_form_r,

		env_a_time_a,
		env_a_time_h,
		env_a_time_d,
		env_a_time_s,
        env_a_time_r,

		env_b_time_a,
		env_b_time_h,
		env_b_time_d,
		env_b_time_s,
        env_b_time_r,

		env_c_time_a,
		env_c_time_h,
		env_c_time_d,
		env_c_time_s,
        env_c_time_r,

		env_d_time_a,
		env_d_time_h,
		env_d_time_d,
		env_d_time_s,
        env_d_time_r,

		env_a_value_a,
		env_a_value_h,
		env_a_value_d,
		env_a_value_s,
        env_a_value_r,

		env_b_value_a,
		env_b_value_h,
		env_b_value_d,
		env_b_value_s,
        env_b_value_r,

		env_c_value_a,
		env_c_value_h,
		env_c_value_d,
		env_c_value_s,
        env_c_value_r,

		env_d_value_a,
		env_d_value_h,
		env_d_value_d,
		env_d_value_s,
        env_d_value_r,

		scope_type,
		scope_scale,
	};
}




	struct bus_connector
	{
		std::atomic<float>* pot[settings::pot_n];
		std::atomic<float>* prm[settings::prm_n];
		std::atomic<float>* btn[settings::btn_n];
		std::atomic<float>* mtx[settings::ports_in * settings::ports_out];
        
		bus_connector()
		{
			for(int i = 0; i < settings::pot_n; ++i) 
			{
				pot[i] = &core::zero;
			}

			for(int i = 0; i < settings::prm_n; ++i) 
			{
				prm[i] = &core::zero;
			}

			for(int i = 0; i < settings::btn_n; ++i) 
			{
				btn[i] = &core::zero;
			}

			for(int i = 0; i < (settings::ports_in * settings::ports_out); ++i) 
			{
				mtx[i] = &core::zero;
			}

		}
		~bus_connector() {};
	};


} // Namespace core
